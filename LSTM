import numpy as np
import pandas as pd
from keras.models import Sequential
from keras.layers import LSTM, Dense, Dropout
from sklearn.preprocessing import MinMaxScaler
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_squared_error

# Carga de datos
def load_data(filename):
    # Cargar los datos desde un archivo CSV
    dataframe = pd.read_csv(filename, index_col=0)
    return dataframe

# Preprocesamiento de los datos
def preprocess_data(data, feature_columns, target_column):
    data = data[feature_columns + [target_column]]
    scaler = MinMaxScaler(feature_range=(0, 1))
    scaled_data = scaler.fit_transform(data)

    # Convertir datos a formato supervisado
    X, y = [], []
    for i in range(len(scaled_data) - 1):
        X.append(scaled_data[i, :-1])
        y.append(scaled_data[i + 1, -1])

    return np.array(X), np.array(y), scaler

# Crear el modelo LSTM
def create_lstm_model(input_shape):
    model = Sequential()
    model.add(LSTM(50, return_sequences=True, input_shape=input_shape))
    model.add(Dropout(0.2))
    model.add(LSTM(50, return_sequences=False))
    model.add(Dropout(0.2))
    model.add(Dense(1))
    model.compile(optimizer='adam', loss='mean_squared_error')
    return model

# Entrenamiento del modelo
def train_model(model, X_train, y_train, X_test, y_test):
    model.fit(X_train, y_train, epochs=50, batch_size=72, validation_data=(X_test, y_test), verbose=2)
    return model

# Cargar los datos
filename = 'tu_archivo_de_datos.csv'  # Cambia esto por la ruta de tu archivo de datos
dataframe = load_data(filename)

# Preprocesar los datos
feature_columns = ['lista', 'de', 'columnas', 'de', 'características']  # Cambia esto por tus columnas de características
target_column = 'tu_columna_objetivo'  # Cambia esto por tu columna objetivo
X, y, scaler = preprocess_data(dataframe, feature_columns, target_column)

# Dividir los datos en conjuntos de entrenamiento y prueba
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=0)

# Remodelar entrada para que sea 3D [muestras, pasos de tiempo, características]
X_train = X_train.reshape((X_train.shape[0], 1, X_train.shape[1]))
X_test = X_test.reshape((X_test.shape[0], 1, X_test.shape[1]))

# Crear y entrenar el modelo
model = create_lstm_model((X_train.shape[1], X_train.shape[2]))
model = train_model(model, X_train, y_train, X_test, y_test)

# Evaluación del modelo
y_pred = model.predict(X_test)
y_test_inv = scaler.inverse_transform(np.concatenate((X_test.reshape((X_test.shape[0], X_test.shape[2])), y_test.reshape(-1, 1)), axis=1))[:, -1]
y_pred_inv = scaler.inverse_transform(np.concatenate((X_test.reshape((X_test.shape[0], X_test.shape[2])), y_pred), axis=1))[:, -1]
rmse = np.sqrt(mean_squared_error(y_test_inv, y_pred_inv))
print('Test RMSE: %.3f' % rmse)
